I"<p>In the <a href="/en/git-editing-commits-part-1/">previous post</a>, we have seen two of the things that are possible to do with interactive <code class="highlighter-rouge">rebase</code>:</p>

<ul>
  <li>change the <em>commits</em> order</li>
  <li>edit the <em>commits</em> message</li>
</ul>

<p>In this post, we’re going to see how to merge two commits and also how to divide a commit in two.</p>

<h2 id="remembering">Remembering</h2>

<p>I strongly recommend you read the previous post, to get used to the <code class="highlighter-rouge">rebase</code> flow. So, we run again the command:</p>

<script src="https://gist.github.com/677088afc36ee7fca209e725c6d3d3d5.js"> </script>

<p>And then, we see a screen like that:</p>

<script src="https://gist.github.com/7c5fde1e19367ca87b61e89dedffa350.js"> </script>

<p>So far, nothing new. Let’s move on…</p>

<h2 id="merging-commits">Merging <em>commits</em></h2>

<p>Let’s merge the <em>commits</em> related to CSS and JS adjustments, which probably are similar (they even could edit the same code) and perhaps it makes sense if they were only one commit.</p>

<p>To do that, we type <code class="highlighter-rouge">squash</code> in a <em>commit</em>. Doing that, <code class="highlighter-rouge">git</code> understand we want to merge this marked <em>commit</em>  with the previous one (above).</p>

<script src="https://gist.github.com/b5622f6453a5e626b925dedae34f29f5.js"> </script>

<p>After that, we see a screen that shoes both <em>commits</em> messages:</p>

<script src="https://gist.github.com/29da7420b8fa326337188d06fcacdc88.js"> </script>

<p>Now we just have to remove or comment the lines with the <em>commits</em> messages and insert the new message:</p>

<script src="https://gist.github.com/911f36914065d88e0e8478cbc25fc76c.js"> </script>

<p>And… done! Now if we run a <em>log</em> of the commits, we will see something similar to:</p>

<script src="https://gist.github.com/41d4e91fd6fbbb2596f70be9263426ed.js"> </script>

<h2 id="splitting-a-commit">Splitting a <em>commit</em></h2>

<p>As we’re crazy, now we want to revert the previous process and spit the <em>commit</em> that was merged. Jokes apart, we can do it, for example, in a commit that with a lot of changes and perhaps we could split it to make the git commit story better to understand. So we run the <code class="highlighter-rouge">rebase</code>:</p>

<script src="https://gist.github.com/0d4a974fb595ac86d7952788e99cf504.js"> </script>

<p>We see a screen that we are used to knowing; then we change the word <code class="highlighter-rouge">pick</code> for <code class="highlighter-rouge">edit</code> in the <em>commit</em> we want to edit.</p>

<script src="https://gist.github.com/ab809bf3e7e7e742cddef1e79bfa3371.js"> </script>

<p>So, quit the edit mode and we’re going to see this:</p>

<script src="https://gist.github.com/178ade618c0ffe7bfe78a264b5b07c51.js"> </script>

<p>This is the cool part. What happened here was the <code class="highlighter-rouge">rebase</code> stopped in the <em>commit</em> we specified. Now we have three options:`</p>

<ul>
  <li><code class="highlighter-rouge">git commit --amend</code> =&gt; to change the <em>commit</em> editing/adding one or more files.</li>
  <li><code class="highlighter-rouge">git rebase --continue</code> =&gt; to move on with the<code class="highlighter-rouge">rebase</code> without doing anything (use this same command before the previous on to continue with the <code class="highlighter-rouge">rebase</code>).</li>
  <li><code class="highlighter-rouge">git reset HEAD^</code> =&gt; Return the <em>commit</em> we are stopped.</li>
</ul>

<p>At this point, if we run a <code class="highlighter-rouge">git status</code> we would see the files that were modified in the <em>commit</em>:</p>

<script src="https://gist.github.com/d01f3892d76caa1de0db98ad7d73a377.js"> </script>

<p>Now we could add the files and commit them. Theoretically, here you do the <em>commits</em> splitting. For our example, we could do something like:</p>

<script src="https://gist.github.com/a9d13a6e14122a04a1f7e4c18a9565d2.js"> </script>

<p>What we did was adding files step by step and make <em>commits</em>. With all of this done, we could move on with the <code class="highlighter-rouge">rebase</code>:</p>

<script src="https://gist.github.com/1fabc06fb363a70685012dd0ff3332d9.js"> </script>

<p>And… done! Now if we look the log, we would have something like that:</p>

<script src="https://gist.github.com/81658d8c578abb9b8a0cafdb15cb54b0.js"> </script>

<h2 id="forcing-the-push">Forcing the push</h2>

<p><a href="https://github.com/raphaelfabeni/raphaelfabeni.github.io/issues/9">As well remembered</a> by <a href="https://github.com/ciceropablo">Cícero Pablo</a>, when we use the <em>interactive rebase</em> , if you already have a repository with a history of <em>commits</em>, you must do <code class="highlighter-rouge">push</code> with the <code class="highlighter-rouge">--force</code> flag.</p>

<p><strong>Some notes</strong>.</p>

<ul>
  <li>The file names/structure and messages of all <em>commits</em> are just an example.</li>
  <li>We used the word <em>screen</em> to make reference each return of the terminal.</li>
  <li>By default, my terminal editor is <em>vim</em>, that makes easier to edit the <em>screens</em> that I commented in the previous topic.</li>
</ul>
:ET