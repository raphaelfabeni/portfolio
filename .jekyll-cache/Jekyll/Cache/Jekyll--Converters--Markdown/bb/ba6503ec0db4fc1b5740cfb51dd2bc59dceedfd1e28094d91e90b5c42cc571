I"† <p>Voc√™ testa seu c√≥digo <strong>JS</strong>?  Se a resposta foi n√£o, nunca √© tarde pra come√ßar. N√£o vou me alongar aqui falando o porque tanta gente fala de fazer testes, existem milhares de posts sobre isso. Vou direto ao assunto: o brother <em>Jasmine</em>.</p>

<h2 id="o-tal-do-jasmine">O tal do <strong>Jasmine</strong></h2>

<p><strong>Jasmine</strong> √© um framework <em>behavior-driven development</em> para testar nossos paranau√™s em <em>JavaScript.</em> Uma das coisas legais que particularmente achei dele √© que a sintaxe √© bem intuitiva o que faz com que escrever testes se torne uma tarefa f√°cil.</p>

<h3 id="na-pr√°tica">Na pr√°tica..</h3>

<p>Mostrar na pr√°tica √© bem melhor que s√≥ teoria. Ent√£o vamos l√°.. Primeiro fa√ßa o download da <a href="https://github.com/jasmine/jasmine/releases">√∫ltima vers√£o do Jasmine</a> (recomendo seguir o <a href="https://github.com/jasmine/jasmine#installation">passo a passo deles no GitHub</a>, super tranquilo).</p>

<p>Pra essa brincadeira criei duas pastas: uma com o nome <code class="highlighter-rouge">jasmine</code> onde joguei todos os arquivos do <em>framework</em> e outra chamada <code class="highlighter-rouge">hello</code> onde vamos jogar os arquivos desse primeiro exemplo r√°pido. Dentro dessa pasta vamos criar uma pasta chamada <code class="highlighter-rouge">spec</code> onde deixaremos os arquivos relacionados aos testes. Nossa pasta <code class="highlighter-rouge">hello</code> seria assim:</p>

<ul>
  <li><em>hello.js</em> =&gt; nossa m√°gica;</li>
  <li><em>spec/index.html</em> =&gt; para podermos visualizar o resultado dos nossos testes;</li>
  <li><em>spec/hello.spec.js</em> =&gt; nossos testes.</li>
</ul>

<p>E a estrutura completa ficaria assim:</p>

<script src="https://gist.github.com/1313a915f45ebcbcfd84f815813a2db9.js"> </script>

<p><strong>Um adendo:</strong> essa foi uma organiza√ß√£o s√≥ a fim de exemplo.</p>

<p>Ent√£o temos nosso menino <code class="highlighter-rouge">spec/index.html</code>:</p>

<script src="https://gist.github.com/1804dffb87943bdf8f2148f8b99c0cdd.js"> </script>

<p>A√≠ temos um exemplo simples de arquivo <code class="highlighter-rouge">JavaScript</code>:</p>

<script src="https://gist.github.com/9ffbcf759aa578a9d23763f0c44bbb1d.js"> </script>

<p>Observando o arquivo anterior, conseguimos j√° visualizar o que acontece certo? Mentalmente j√° esperamos que ao criarmos um <strong>objeto</strong> utilizando <code class="highlighter-rouge">Hello</code> e chamarmos o <strong>m√©todo</strong> <code class="highlighter-rouge">sayHy</code>, deve-se retornar uma <strong>string</strong> espec√≠fica com o <strong>argumento</strong> que passarmos.</p>

<p>Passando pra parte test√°vel da coisa. Vamos l√°, poder√≠amos implementar nosso teste assim:</p>

<script src="https://gist.github.com/d28a0c3976b88646396eeda691388fa9.js"> </script>

<p>Destrinchando nosso arquivo de teste:</p>

<ul>
  <li><code class="highlighter-rouge">describe</code> =&gt; √© o que chamamos de <em>suite</em>. Seu nome, no caso <em>Hello</em>, geralmente define um componente da sua aplica√ß√£o (pode ser uma <em>classe</em>, uma fun√ß√£o ou qualquer outra coisa). Aceita 2 argumentos: uma <em>string</em> que √© o nome da <em>suite</em> e uma fun√ß√£o que √© o bloco de c√≥digo que implementamos o teste.</li>
  <li><code class="highlighter-rouge">it()</code> =&gt; resumidamente √© uma fun√ß√£o que diz o que um pequeno peda√ßo do seu componente deve fazer. No exemplo, demos uma descri√ß√£o do teste (<em>says my name</em>), e esperamos (analogia com o <em>expect</em>) que o m√©todo <code class="highlighter-rouge">sayHi</code>, quando chamado com o argumento <em>Fabeni</em>, retorne uma determinada <em>string</em> (<em>my name is Fabeni and I‚Äôm learning Jasmine!</em>).</li>
</ul>

<p>Poder√≠amos tamb√©m mudar algumas coisas na organiza√ß√£o do c√≥digo e adicionarmos a fun√ß√£o <code class="highlighter-rouge">beforeEach</code>:</p>

<script src="https://gist.github.com/05b6347183553c3ddf81b25f293950cd.js"> </script>

<p>A fun√ß√£o <code class="highlighter-rouge">beforeEach</code> como o pr√≥prio nome diz, roda uma vez antes de cada <code class="highlighter-rouge">spec</code> do <code class="highlighter-rouge">describe</code> e, tamb√©m existe o <code class="highlighter-rouge">afterEach</code> que tem o papel inverso e roda uma vez depois de cada <code class="highlighter-rouge">spec</code>.</p>

<p>Se abrirmos nosso <code class="highlighter-rouge">index.html</code> para rodarmos nossos testes, teremos algo assim:</p>

<figure class="loading">
    <img src="https://cloud.githubusercontent.com/assets/1345662/11458112/851b776a-96a0-11e5-9702-2a887ca36753.png" alt="Print da tela mostrando que o teste passou" />
    <figcaption>Nosso teste passou! \o/</figcaption>
</figure>

<p>√â poss√≠vel tamb√©m usar o <em>Jasmine</em> para fazer testes em aplica√ß√µes com <em>Node.js</em> atrav√©s do <a href="https://github.com/mhevery/jasmine-node">Jasmine Node</a>. Depois de instalado, precisar√≠amos fazer pequenos ajustes no nosso c√≥digo para test√°-lo:</p>

<p>Nosso arquivo <code class="highlighter-rouge">hello.js</code> ficaria assim:</p>

<script src="https://gist.github.com/14451fa6ba86d9484a7e0724ec286dc3.js"> </script>

<p>E nosso arquivo de testes <code class="highlighter-rouge">hello.spec.js</code> ficaria assim:</p>

<script src="https://gist.github.com/ec699d7a7f35753b89a4376c50331148.js"> </script>

<p>Ea√≠ √© s√≥ rodarmos nosso teste via terminal:</p>

<figure class="loading">
  <img src="https://cloud.githubusercontent.com/assets/1345662/11458110/85197528-96a0-11e5-97a2-c6dfed6589d2.gif" alt="Gif animado mostrando o teste do jasmine node" />
</figure>

<h2 id="testes-antes">Testes antes?</h2>

<p>No exemplo anterior primeiro desenvolvemos nosso c√≥digo e depois escrevemos nosso teste. No <em>TDD</em> ocorre o inverso: primeiro escrever√≠amos os testes e depois o nosso c√≥digo. Achou estranho? Vamos tentar brincar.</p>

<p>Comecemos de algo b√°sico: imagine que queremos ter uma fun√ß√£o simples que aceita 2 n√∫meros como argumentos e nos retorna o resultado da adi√ß√£o de ambos. Poder√≠amos fazer um teste simples assim:</p>

<script src="https://gist.github.com/37a5c6a5cd391643af20efecd1ed6268.js"> </script>

<p>No teste acima, quebramos nosso componente em 2 testes espec√≠ficos:</p>

<ul>
  <li>primeiro esperamos que ao passarmos os n√∫meros <em>5</em> e <em>3</em>, ele nos retorne <em>8</em>, fazendo a soma normalmente.</li>
  <li>segundo, esperamos que se apenas um argumento for passado, esse argumento seja somado a ele mesmo, ou seja, se apenas o n√∫mero <em>5</em> for passado, o resultado deve ser <em>10</em>, vindo da opera√ß√£o <em>5 + 5</em>.</li>
</ul>

<p><strong>Obs.:</strong> Poder√≠amos ter mais um monte de testes, como verificar se o argumento passado √© realmente um n√∫mero, mas deixemos apenas esses 2 para o exemplo.</p>

<p>Tendo isso em mente, podemos partir pro nosso c√≥digo:</p>

<script src="https://gist.github.com/c36997a8b364e113d947793fc2fb8b33.js"> </script>

<p>Com certeza, de cara j√° poder√≠amos imaginar algo assim certo? No entanto como √© de se esperar isso vai nos retornar um erro quando rodarmos os testes.</p>

<figure class="loading">
  <img src="https://cloud.githubusercontent.com/assets/1345662/11458111/851a90d4-96a0-11e5-919b-322f79dcc44c.png" alt="Print da tela mostrando que os testes quebraram" />
</figure>

<p>Nossos testes quebraram e conseguimos ver exatamente onde: <em>Calc 1 argument - should calculate the addition using the argument twice</em>. Isso acontece pois n√£o fizemos nenhum tratamento na nossa fun√ß√£o caso recebessemos apenas um argumento. Vamos l√° ent√£o:</p>

<script src="https://gist.github.com/e6a949aca6edf5b102ea96f578cab27b.js"> </script>

<p>Agora se rodarmos os testes novamente:</p>

<figure class="loading">
  <img src="https://cloud.githubusercontent.com/assets/1345662/11458109/8519037c-96a0-11e5-8e85-2c36af470449.png" alt="Print da tela mostrando que os testes passaram" />
</figure>

<p>Acho que √© isso. No pr√≥ximo post, vou tentar escrever um pouco sobre os <em>matchers</em> do <em>Jasmine</em> que √© uma outra parte bem legal do framework. Deixo aqui meu <strong>valeu</strong> ao <a href="https://twitter.com/_weslleyaraujo">Weslley Araujo</a> pela revis√£o do conte√∫do!</p>
:ET