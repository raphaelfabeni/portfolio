I"ø<h2 id="guarde-o-tamanho-do-array">Guarde o tamanho do array</h2>

<p>Com nossos brothers loops <code class="highlighter-rouge">for</code>, conseguimos iterar em arrays ou tamb√©m em objetos semelhantes a arrays. Semelhantes? Como assim!? Por exemplo os objetos <code class="highlighter-rouge">arguments</code> e <code class="highlighter-rouge">HTMLCollection</code>. Provavelmente voc√™ j√° deve ter se deparado com um loop <code class="highlighter-rouge">for</code> (j√° deve ter escrito alguns):</p>

<script src="https://gist.github.com/0ca8ca025a463069c69cb945a63622c4.js"> </script>

<p>De bate pronto, conseguimos perceber algo n√£o t√£o bacana no c√≥digo acima. O comprimento (<code class="highlighter-rouge">length</code>) do array √© acessado em toda itera√ß√£o do loop. Isso n√£o fica t√£o legal quando por exemplo, o objeto √© um <code class="highlighter-rouge">HTMLCollection</code>. Lembra o que s√£o esses caras? Eles que s√£o retornados quando a gente chama:</p>

<ul>
  <li><code class="highlighter-rouge">getElementsByName()</code></li>
  <li><code class="highlighter-rouge">getElementsByClassName()</code></li>
  <li><code class="highlighter-rouge">getElementsByTagName()</code></li>
</ul>

<p>T√°! Legal! Mas ea√≠ n√©?! A zica mesmo √© que toda vez que a gente itera sobre esses caras significa que estamos consultando o nosso <em>DOM</em> ao vivo e a cores, e a <em>toda hora</em>, o que n√£o √© nada bacana.</p>

<p>Com base nisso, uma solu√ß√£o que podemos chegar seria <em>guardarmos</em> o comprimento do array; algo parecido com isso:</p>

<script src="https://gist.github.com/ceb6159c8ef9cc3f212951c8070bdaab.js"> </script>

<p>O que fizemos acima foi armazenar o valor da propriedade <code class="highlighter-rouge">length</code>, evitando assim ter que calcul√°-la a cada itera√ß√£o do loop.</p>

<h2 id="verifique-se-a-propriedade-pertence-√†quele-objeto">Verifique se a propriedade pertence √†quele objeto</h2>

<p>Al√©m do nosso amigo do exemplo anterior temos o loop <code class="highlighter-rouge">for-in</code> que usamos pra iterar em objetos. Uma coisa bacana de se fazer e que pode evitar que algo que voc√™ n√£o queira aconte√ßa, √© usar o m√©todo <code class="highlighter-rouge">hasOwnProperty()</code>. Esse m√©todo simplesmente vai filtrar apenas as propriedades do objeto em si, excluindo as propriedades herdadas pelo <code class="highlighter-rouge">prototype</code>.</p>

<p>Um exemplo r√°pido:</p>

<script src="https://gist.github.com/9939db18667534ec5e3f706418f87a80.js"> </script>

<p>A√≠ em uma parte obscura, aparece algo que adiciona uma propriedade a todos os objetos.</p>

<script src="https://gist.github.com/a690c84ae4728f8c16dc42052761816b.js"> </script>

<p>O que aconteceu acima foi que verificamos se existe a propriedade <code class="highlighter-rouge">feijao</code> em <code class="highlighter-rouge">Object</code> e, caso ela n√£o exista definimos ela com o valor <code class="highlighter-rouge">preto</code>. A√≠ que est√° o neg√≥cio da coisa, nosso objeto <code class="highlighter-rouge">burger</code>, j√° herda a propriedade <code class="highlighter-rouge">feijao</code> via <code class="highlighter-rouge">prototype</code>.</p>

<p>Com isso, para evitarmos que <code class="highlighter-rouge">feijao</code> apare√ßa quando listarmos as propriedades de <code class="highlighter-rouge">burger</code> (at√© porque feij√£o, na minha opini√£o, n√£o combina muito com hamburguer), fazemos o seguinte:</p>

<script src="https://gist.github.com/0b4271fe4b9ccf8090d7de3872593b75.js"> </script>

<p>Do contr√°rio, caso n√£o fiz√©ssemos essa verifica√ß√£o, ter√≠amos algo assim:</p>

<script src="https://gist.github.com/6204a86627b272f6a83b5ff0bfd3e0e4.js"> </script>

<p><em>Refer√™ncias</em> =&gt; <a href="http://www.amazon.com/Learning-JavaScript-Edition-Shelley-Powers/dp/0596521871">Learning JavaScript</a></p>

<p>Obs. Queria deixar aqui meu <em>muito obrigado</em> ao <a href="https://github.com/ftonato">Adem√≠lson Tonato</a> pela ajuda na corre√ß√£o do post.</p>
:ET