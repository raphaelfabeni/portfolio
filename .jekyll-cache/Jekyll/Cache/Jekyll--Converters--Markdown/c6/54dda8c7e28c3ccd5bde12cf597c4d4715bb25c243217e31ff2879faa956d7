I"Ï<h2 id="cria√ß√£o-de-um-array">Cria√ß√£o de um array</h2>

<p>Algu√©m usa o construtor <code class="highlighter-rouge">new Array()</code>? Eu particularmente n√£o uso, mas quando vi isso, achei legal deixar registrado pois era algo que n√£o sabia e vai que no dia a dia encontramos algum projeto com isso.</p>

<p>Se criarmos um array atrav√©s do <code class="highlighter-rouge">new Array()</code> passando argumentos entre os par√™nteses, temos um array com esses valores que foram passados. Algo assim:</p>

<script src="https://gist.github.com/aa279b12ae1daeda1cd84d38d6a096eb.js"> </script>

<p>Seria o mesmo caso fiz√©ssemos isso:</p>

<script src="https://gist.github.com/320c1d7a52da47003715fe7e89c0f380.js"> </script>

<p>E se passarmos apenas um valor como argumento? Ter√≠amos um array com apenas um item, certo? <em>Mahomenos‚Ä¶</em> A√≠ que vem a pegadinha do <em>JavaScript</em> malandro. Se criarmos usando a sintaxe literal, realmente temos um array com apenas um item:</p>

<script src="https://gist.github.com/30b4d87c4c60841391eaee494a09e2a5.js"> </script>

<p>Agora se criarmos usando <code class="highlighter-rouge">new Array()</code> o que acontece √© que esse <em>√∫nico</em> valor passado como argumento vira o comprimento do array e n√£o um item dele.</p>

<script src="https://gist.github.com/700da6e447477d82691f5a77535c03c1.js"> </script>

<h2 id="fun√ß√µes-imediatas-e-par√¢metros">Fun√ß√µes imediatas e par√¢metros</h2>

<p>J√° ouvimos bastante a respeito de fun√ß√µes imediatas, correto? Recapitulando rapidamente, ela permite que uma fun√ß√£o seja executada assim que seja definida. Isso √© bom principalmente pelo fato de fornecer um escopo tempor√°rio para a m√°gica que voc√™ vai fazer, sem a necessidade de poluir seu escopo global.</p>

<script src="https://gist.github.com/44282b1c5dc3a846d8c0eb083b8d44ac.js"> </script>

<p>Uma coisa bacana √© que podemos passar argumentos para as fun√ß√µes imediatas. Podemos ent√£o ter algo assim:</p>

<script src="https://gist.github.com/08c5e9ab6de39dd276986d335b36aff2.js"> </script>

<p>Como <a href="https://github.com/raphaelfabeni/raphaelfabeni.github.io/pull/15">observado</a> pelo <a href="https://twitter.com/omauriciosoares">Mauricio Soares</a>, uma grande vantagem de passar par√¢metros para uma fun√ß√£o imediata (IIFE), √© que esse valor √© passado como uma c√≥pia, e n√£o como uma refer√™ncia‚Ä¶ Isto significa que se alterarmos o valor desse par√¢metro dentro da IIFE, esse valor n√£o vai persistir fora dela‚Ä¶ por exemplo:</p>

<script src="https://gist.github.com/4d83c2e5ddc8c7aabad3822173e402bc.js"> </script>

<p>Isso √© bom para criarmos c√≥pias de variaveis globais, e garantirmos que se alguem sobreescrever essa vari√°vel, isso n√£o vai influenciar o m√≥dulo que criamos. Esse comportamento tamb√©m √© conhecido como Closure.</p>

<p><strong>ProTip</strong>: √â uma excelente pr√°tica passarmos o jQuery, window por exemplo,como par√¢metros para IIFE‚Äôs.</p>

<h2 id="call-e-apply-sem-medo"><code class="highlighter-rouge">call</code> e <code class="highlighter-rouge">apply</code> sem medo</h2>

<p>Esses dois caras s√£o bem semelhantes. Ambos permitem invocar uma fun√ß√£o em um outro contexto (que vai ser o <em>primeiro par√¢metro</em> que voc√™ vai passar pra eles) e com os argumentos que passarmos (que ser√£o o <em>segundo par√¢metro</em> que passarmos). Ent√£o, <code class="highlighter-rouge">call</code> e <code class="highlighter-rouge">apply</code> permitem que:</p>

<ul>
  <li>1¬∫ par√¢metro =&gt; possamos dizer em qual <em>escopo</em> uma determinada fun√ß√£o deve ser executada;</li>
  <li>2¬∫ par√¢metro =&gt; consigamos definir os argumentos que ser√£o passados para a fun√ß√£o.</li>
</ul>

<p>O que muda entre <code class="highlighter-rouge">call</code> e <code class="highlighter-rouge">apply</code> √© a forma de como passar o segundo par√¢metro:</p>

<ul>
  <li><code class="highlighter-rouge">call</code> =&gt; uma lista de itens (a partir do 2¬∫ par√¢metro);</li>
  <li><code class="highlighter-rouge">apply</code> =&gt; um array de elementos.</li>
</ul>

<p><em>Para de falar Fabeni, mostra alguma coisa a√≠!</em></p>

<script src="https://gist.github.com/2e0b41ebcab0e485892945ac080c05e0.js"> </script>

<p>O que temos acima √© mais ou menos o seguinte:</p>

<ul>
  <li>um objeto simples chamado <code class="highlighter-rouge">mister</code>;</li>
  <li>uma fun√ß√£o <code class="highlighter-rouge">hello</code> que retorna uma <code class="highlighter-rouge">string</code> de acordo com os par√¢metros passados;</li>
  <li>as chamadas das fun√ß√µes usando o formato padr√£o e usando <code class="highlighter-rouge">call</code> e <code class="highlighter-rouge">apply</code>.</li>
</ul>

<p>Um outro exemplo que talvez possa ajudar: vamos imaginar que possamos ter uma fun√ß√£o simples que vai iterar sobre os argumentos dessa fun√ß√£o (o objeto <code class="highlighter-rouge">arguments</code>). Poder√≠amos pensar em algo assim:</p>

<script src="https://gist.github.com/472ac62b30b051c20af8062943bdabe1.js"> </script>

<p>A√≠ que vive o problema: vamos ter um erro se tentarmos algo assim.</p>

<p><em>TypeError: likeArray.forEach is not a function</em></p>

<p>Isso acontece pois o nosso brother <code class="highlighter-rouge">arguments</code> √© um objeto e n√£o um <em>array</em>. Pra podermos conseguir usar o <code class="highlighter-rouge">forEach</code>, precisamos converter <code class="highlighter-rouge">arguments</code> em um <em>array</em> e conseguimos isso utilizando o m√©todo <code class="highlighter-rouge">slice</code>. No entanto, ele √© um m√©todo que pertence ao <code class="highlighter-rouge">prototype</code> de <code class="highlighter-rouge">Array</code>. Da√≠ que vem a pergunta: como fazemos ent√£o pra executar a fun√ß√£o/m√©todo em um outro contexto (executar <code class="highlighter-rouge">slice</code> no contexto do objeto <code class="highlighter-rouge">arguments</code>)? A resposta meu caro amigo: <code class="highlighter-rouge">call</code> ou <code class="highlighter-rouge">apply</code>.</p>

<script src="https://gist.github.com/af0998ce2a69363801bb3f6058b34677.js"> </script>

<p>No exemplo acima, alteramos a linha relacionada √† vari√°vel <code class="highlighter-rouge">likeArray</code>, aplicando o m√©todo <code class="highlighter-rouge">slice</code> no contexto de <code class="highlighter-rouge">arguments</code> atrav√©s do <code class="highlighter-rouge">call</code>.</p>

<p><em>Refer√™ncias</em> =&gt; <a href="http://www.amazon.com/Learning-JavaScript-Edition-Shelley-Powers/dp/0596521871">Learning JavaScript</a></p>

<p>Deixo aqui meu muito obrigado ao <a href="https://twitter.com/omauriciosoares">Mauricio Soares</a>, ao <a href="https://twitter.com/_weslleyaraujo">Weslley Araujo</a> e ao <a href="https://github.com/fredericksilva">Frederick Silva</a> pela revis√£o e contribui√ß√£o no texto.</p>
:ET