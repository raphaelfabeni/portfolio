I"y<p>Acredito que não há dúvidas de que o Design Responsivo veio pra ficar e que não está mais apenas <em>na moda</em>. Mais do que ficar pensando em tamanhos específicos de telas ou em <em>mobile</em> e <em>tablet</em>, minha opinião é que esqueçamos isso. Com a variedade de smartphones diferentes que existem hoje, acho difícil separarmos o que é <em>mobile</em> do que é <em>tablet</em> ou <em>desktop</em>. Um exemplo disso é o <a href="http://viewportsizes.com/">Viewport sizes</a> que traz uma lista completa com os tamanhos dos <em>viewports</em> de vários dispositivos diferentes. Mas isso é só a minha opinião.</p>

<p>Acredito que o principal é fazer com que o seu conteúdo, independente de resolução ou tela, seja acessível pro usuário; afinal, e muitas vezes esquecemos disso, é exatamente isso que importa: que <em>o usuário encontre a informação que procura</em>. Quem aqui nunca entrou em algum site pra procurar algo, e por um motivo <em>xis</em> não conseguiu acessar aquela informação, seja por ela não estar disposta de forma correta, ou por algum problema <em>cross-browser</em> e por aí vai.</p>

<h2 id="adaptando-seu-conteúdo">Adaptando seu conteúdo</h2>

<p>Pra mim, uma das principais vertentes que o <em>design responsivo</em> trouxe foi a priorização de volta no conteúdo. Mais que qualquer coisa, devemos focar na <em>informação</em> que deve ser passada e garantir que ela seja acessada independente de dispositivo ou resolução.</p>

<p>E, nesse caminho das pedras, uma hora ou outra teremos que trabalhar com um tipo de conteúdo que pode variar. <em>Eaí Bino, como fazer?</em> Nesses dias cai numa situação desse tipo e vi que há diversos caminhos para resolver esse problema.</p>

<h2 id="o-problema-do-conteúdo-variável">O problema do conteúdo variável</h2>

<p>Jogo rápido: imaginem uma lista disposta horizontalmente com <em>5 itens</em>. Podemos pensar então que em uma determinada resolução cada item teria <em>20%</em> de largura da lista e em um determinado <em>breakpoint</em> cada item ficaria com a largura total da lista (ou se formos pelo lado do <em>mobile first</em>, cada item teria por padrão a largura inteira da lista e, só a partir de um determinado <em>breakpoint</em> que ele ficaria com a nova largura de <em>20%</em>).</p>

<script src="https://gist.github.com/546d68dd0085fdbd67a1f23554c331e5.js"> </script>

<p>Ou, se pensarmos numa abordagem <em>mobile first</em> (apenas a encargo de exemplo):</p>

<script src="https://gist.github.com/a31f3bbac74b584936ff52bb192cbc7f.js"> </script>

<p>Beleza, <em>matou</em>! Mas, e se a quantidade de itens variar? Por exemplo entre 3 e 5? Me deparei com uma situação semelhante alguns dias atrás e meu primeiro pensamento foi: antes da renderização dos elementos na página eu vejo quantos itens tem ali e, dependendo do resultado, coloco uma classe na lista. Algo mais ou menos assim:</p>

<script src="https://gist.github.com/5c3da021c428ce52e0a386f8978d76de.js"> </script>

<p>Resolve o problema? Resolve. Mas nem sempre temos essa opção, de contar por exemplo com o lado do servidor para nos retornar o número de itens. Aí nesse caso, uma outra solução seria via JavaScript, seguindo o mesmo pensamento: contar os elementos e de acordo com o resultado, aplicar uma classe na lista.</p>

<p>E tem ainda uma outra coisa: nesse caso nem estamos pensando ainda em <em>breakpoints</em> e variações de resolução. Paramos ainda no primeiro ponto que é simplesmente que o seu <em>conteúdo</em> esteja bem disposto numa resolução qualquer; pra depois disso, podermos pensar na estratégia a se seguir.</p>

<p>Dando uma pesquisada na Barsa da internet vi que daria pra resolver esse problema apenas com o velho e bom CSS.</p>

<h2 id="contando-os-elementos">Contando os elementos</h2>

<p>A idéia básica é através do CSS, descobrirmos quantos itens estão presentes na lista e a partir daí aplicarmos a largura correta para cada item. <em>Mas, eaí? Como contar, certo?</em> Podemos usar a <em>magia negra</em> dos <em>pseudo</em> seletores pra nos ajudar com isso.</p>

<h3 id="o-cara-nth-last-child">O cara nth-last-child</h3>

<p>Esse <em>brother</em> aí nada mais faz do que contar o elemento partindo do seu último item. Então se quiséssemos, por exemplo selecionar o segundo item da lista, mas iniciando a contagem do fim, faríamos algo assim:</p>

<script src="https://gist.github.com/25598b080e4a1c48a7d03c487937fcce.js"> </script>

<p>Uma representação bem simples do item selecionado:</p>

<ul>
  <li>item 1</li>
  <li>item 2</li>
  <li>item 3</li>
  <li><em>item 4 (selecionado)</em></li>
  <li>item 5</li>
</ul>

<p>Tendo idéia de como selecionar um elemento, podemos estabelecer a seguinte linha de raciocínio:</p>

<ul>
  <li>temos que saber exatamente quantos itens temos, chegando no primeiro elemento da lista.</li>
  <li>selecionar todos os elementos irmãos.</li>
</ul>

<p>Vamos por partes. Conseguimos matar o primeiro item utilizando o que vimos no exemplo anterior. Então, partindo de uma lista de 5 itens, poderíamos fazer algo assim:</p>

<script src="https://gist.github.com/43e970b9b44956a0658bae82dc325fc4.js"> </script>

<p><em>E shaaazam!</em> Conseguimos teoricamente <em>contar</em> quantos elementos temos na lista. Agora é só aplicarmos as demais variações.</p>

<script src="https://gist.github.com/251d420b63f38d279b235d43d4069afd.js"> </script>

<p>Fiz um exemplo rápido no <em>CodePen</em> com o que falamos aqui.</p>

<figure class="text-center loading">
    <p data-height="268" data-theme-id="4240" data-slug-hash="xGNXzO" data-default-tab="result" data-user="raphaelfabeni" class="codepen">See the Pen <a href="http://codepen.io/raphaelfabeni/pen/xGNXzO/">Quantity queries</a> by Raphael Fabeni (<a href="http://codepen.io/raphaelfabeni">@raphaelfabeni</a>) on <a href="http://codepen.io">CodePen</a>.</p>
</figure>

<p>Algumas referências e links legais:</p>

<ul>
  <li><a href="http://www.smashingmagazine.com/2015/07/quantity-ordering-with-css/">Quantity ordering with CSS</a></li>
  <li><a href="http://quantityqueries.com/">Quantity queries</a></li>
</ul>

<script async="" src="//assets.codepen.io/assets/embed/ei.js"></script>

:ET